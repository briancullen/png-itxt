#!/usr/bin/env node

var fs = require('fs')
var program = require('commander')
var pngitxt = require('..')

program
  .version('1.3.0')
  .usage('[options] <fileIn.png>')
  .description('Tool for setting textual information into a PNG images. '
        +'If no output method is specified output will be put into {fileIn}_out.png')
  .option('-k, --keyword <keyword>', 'keyword to set the value for')
  .option('-d, --data <chunkdata>', 'data to store with the keyword')
  .option('-f, --file <datafile>', 'text file to read the value from')
  .option('-s, --stdin', 'read value text from standard input')
  .option('-p, --pipe', 'redirect output to stdout for processing')
  .option('-o, --output <file>', 'file to output PNG data to')
  .parse(process.argv)

// Looks at the arguements to see where the output is going to.
if (program.args.length != 1) {
  console.error("ERROR: must specify a valid input file")
  program.help()
}

var writeStream = null
if (program.pipe && program.output) {
  console.error("ERROR: can only specify one output method")
  process.exit(1)
}
else if (program.pipe) {
  writeStream = process.stdout
}
else if (program.output !== undefined) {
  writeStream = fs.createWriteStream(program.output)
}
else {
  var fileName = program.args[0].split(".png")[0] + "_out.png"
  console.log("Using default option method: " + fileName)
  writeStream = fs.createWriteStream(fileName)
  process.exit(1)  
}

// Open the stream to read the PNG data in.
var readStream = fs.createReadStream(program.args[0])

if (program.keyword === undefined 
    || (program.data === undefined && program.file === undefined
       && !program.stdin)) {
  console.error("ERROR: must provide keyword and data to store")
  program.help()
}

if (program.data && program.file
    || program.data && program.stdin
    || program.file && program.stdin) {
  console.error("ERROR: can only specify one input option at a time")
  program.help()
}

function printError (err) {
  console.error("ERROR:", err.message);
  process.exit(1)
}

readStream.on("error", printError)
writeStream.on("error", printError)

function run(err, data) {
  if (err) {
    printError(err)
  }

  readStream.pipe(pngitxt.set(program.keyword,
          data)).pipe(writeStream)  
}

if (program.data !== undefined) {
  run(null, program.data)
}
else if (program.file != undefined){
    fs.readFile(program.file, 'utf8', run)
}
else {
  data = "";
  process.stdin.on("error", printError)
  process.stdin.on('data', function(buf) { data += buf.toString(); });
  process.stdin.on('end', function() { run (null, data) })  
  process.stdin.resume()
}
